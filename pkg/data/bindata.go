// Code generated by go-bindata.
// sources:
// data/schema/queue.sql
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataSchemaQueueSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5f\x8b\x9b\x40\x14\xc5\xdf\xfd\x14\xf7\x4d\x85\x7d\xd8\x2e\xe4\x65\x97\x2e\x58\x77\xb6\x95\xd5\x49\xd0\x11\x36\x94\x22\xa3\xde\x26\x13\xfc\x13\xc6\x31\xc4\x6f\x5f\x1c\xff\x44\x9a\xb4\xe4\xbe\x39\xf3\x3b\x47\xcf\xf5\xb8\x21\x71\x18\x01\xb6\xdd\x10\x38\xd4\x69\xd2\x28\xae\xda\x06\x9c\x08\x08\x8d\x03\xb0\xcc\xac\xe0\xa2\xc4\xdc\x7c\x00\xb3\xe0\x6d\x95\xed\x31\x37\xed\x17\xc3\x98\x84\xce\x37\x9f\x80\xf7\x0e\x74\xcd\x80\x7c\x7a\x11\x8b\x7a\x9f\x06\x2c\x03\xb4\xa1\xc8\x41\x4f\x2a\x76\x0d\x4a\xc1\x0b\x4d\xd2\xd8\xf7\x61\x13\x7a\x81\x13\x6e\xe1\x83\x6c\x1f\x0c\x80\x0a\xcf\x2a\x51\xb2\x1b\x69\x51\xa9\x0b\xea\xfe\x20\xee\x07\x58\x33\xf2\x0a\x8f\x76\xaf\xd9\x49\x9e\xa6\x28\xf5\x5b\x06\x4d\x7f\x3a\x86\xd0\xb3\x08\x35\xbb\xbd\x91\x77\x27\xf6\x19\x5c\xc2\x19\x00\x99\x44\xae\x70\xf8\x5a\x25\x4a\x6c\x14\x2f\x8f\x70\x2d\x72\xe3\x30\x24\x94\x25\xcc\x0b\x48\xc4\x9c\x60\xd3\x8b\x25\x2a\xd9\x25\x59\xdd\x56\x0a\x44\xa5\x70\x87\xf2\x5a\xf9\x38\xc5\x58\xd2\xaf\x5f\xc7\x28\xc3\x61\x8e\x05\xef\xee\xb6\x18\xe8\xd9\xe2\x37\x17\xc5\x68\x7b\x87\xc5\x82\x9e\x1d\x2a\x5e\x22\x8c\x73\xe2\x32\xdb\x73\x69\x3d\xad\x56\xf6\x8d\x3d\x98\x7a\x6b\xad\x2c\xe0\x6f\xc1\xea\xcb\xd3\xbf\x05\x47\xde\x15\x35\x1f\xd6\x7c\x68\xea\xea\x06\xf7\xf3\x97\xf9\xfc\xdc\xdf\xf5\x7c\xff\x2b\xea\x56\x69\xfe\x7f\x99\xd6\x34\x62\xa1\xe3\x51\x06\xc7\xba\x11\x4a\x9c\x30\x99\xa4\x63\xde\xe9\x51\x87\x35\x16\x1d\xf6\xe8\x1b\xf9\xbc\xd1\xe1\xb1\x37\x89\xc8\xcf\xb0\xa6\x43\xad\xe3\xc8\xa3\xdf\x21\x55\x12\x11\xac\xe1\xde\x7e\x31\xfe\x04\x00\x00\xff\xff\xbe\xc5\xa4\x39\x46\x03\x00\x00")

func dataSchemaQueueSqlBytes() ([]byte, error) {
	return bindataRead(
		_dataSchemaQueueSql,
		"data/schema/queue.sql",
	)
}

func dataSchemaQueueSql() (*asset, error) {
	bytes, err := dataSchemaQueueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/schema/queue.sql", size: 838, mode: os.FileMode(420), modTime: time.Unix(1492439390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/schema/queue.sql": dataSchemaQueueSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"queue.sql": &bintree{dataSchemaQueueSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

